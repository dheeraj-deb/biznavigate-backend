generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model businesses {
  business_id          String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenant_id            String              @db.Uuid
  business_name        String              @db.VarChar(255)
  business_type        String?             @db.VarChar(50)
  subscription_plan_id String?             @db.Uuid
  whatsapp_number      String?             @db.VarChar(20)
  brand_colors         Json?
  logo_url             String?
  working_hours        Json?
  created_at           DateTime?           @default(now()) @db.Timestamptz(6)
  updated_at           DateTime?           @default(now()) @db.Timestamptz(6)
  subscription_plans   subscription_plans? @relation(fields: [subscription_plan_id], references: [subscription_plan_id])
  tenants              tenants             @relation(fields: [tenant_id], references: [tenant_id], onDelete: Cascade)
  social_accounts      social_accounts[]
  users                users[]

  @@index([tenant_id], map: "idx_businesses_tenant_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model social_accounts {
  account_id       String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  business_id      String     @db.Uuid
  platform         String     @db.VarChar(50)
  platform_user_id String     @db.VarChar(255)
  page_id          String?    @db.VarChar(255)
  access_token     String
  permissions      Json?
  token_expiry     DateTime?  @db.Timestamptz(6)
  is_active        Boolean?   @default(true)
  created_at       DateTime?  @default(now()) @db.Timestamptz(6)
  businesses       businesses @relation(fields: [business_id], references: [business_id], onDelete: Cascade, onUpdate: NoAction)

  @@index([business_id], map: "idx_social_accounts_business_id")
  @@index([platform_user_id], map: "idx_social_accounts_platform_user")
}

model subscription_plans {
  subscription_plan_id String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  plan_name            String       @db.VarChar(100)
  price                Decimal?     @db.Decimal(10, 2)
  duration_in_days     Int?
  created_at           DateTime?    @default(now()) @db.Timestamptz(6)
  businesses           businesses[]
}

model tenants {
  tenant_id       String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenant_name     String       @db.VarChar(255)
  email           String       @unique
  phone_number    String?      @db.VarChar(20)
  created_at      DateTime?    @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?    @default(now()) @db.Timestamptz(6)
  address         String?      @db.VarChar(255)
  gst_number      String?      @db.VarChar(20)
  pan_number      String?      @db.VarChar(20)
  registration_no String?      @db.VarChar(50)
  businesses      businesses[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.

model roles {
  role_id     String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  role_name   String   @unique
  permissions Json?
  created_at  DateTime @default(now())
  users       users[]
}

model role_intents {
  role_id    String    @db.Uuid
  intent_id  String    @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamptz(6)

  intent intents @relation(fields: [intent_id], references: [intent_id])

  @@id([role_id, intent_id])
}

model intents {
  intent_id   String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  intent_name String    @db.VarChar(100)
  created_at  DateTime? @default(now()) @db.Timestamptz(6)

  role_intents  role_intents[]
  notifications notifications[]
}

model notifications {
  notification_id String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id         String    @db.Uuid
  intent_id       String    @db.Uuid
  message         String
  read_status     Boolean   @default(false)
  created_at      DateTime? @default(now()) @db.Timestamptz(6)

  user   users   @relation(fields: [user_id], references: [user_id])
  intent intents @relation(fields: [intent_id], references: [intent_id])
}

model users {
  user_id     String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  business_id String    @db.Uuid
  role_id     String    @db.Uuid // âœ… matches roles.role_id
  email       String    @unique @db.VarChar(255)
  name        String    @db.VarChar(255)
  is_active   Boolean?  @default(true)
  created_at  DateTime? @default(now()) @db.Timestamptz(6)

  businesses    businesses      @relation(fields: [business_id], references: [business_id], onDelete: Cascade)
  role          roles           @relation(fields: [role_id], references: [role_id])
  notifications notifications[]
}
